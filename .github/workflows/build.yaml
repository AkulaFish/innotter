name: AWS ECR push

on:
  workflow_run:
    workflows: ["Django Postgres CI"]
    branches: [ "main", "dev"]
    types:
      - completed
  workflow_dispatch:
  push:
    branches: [ "main", "dev" ]
  pull_request:
    branches: [ "main", "dev" ]

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    env:
      REPOSITORY: ${{ secrets.REPO_NAME }}
      DJANGO_SETTINGS_MODULE: innotter.settings
      SECRET_KEY: ${{ secrets.SECRET_KEY }}
      POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
      POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
      POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
      POSTGRES_HOST: ${{ secrets.POSTGRES_HOST }}
      POSTGRES_PORT: ${{ secrets.POSTGRES_PORT }}

    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push docker image to Amazon ECR
      env:
        DJANGO_SETTINGS_MODULE: innotter.settings
        SECRET_KEY: ${{ env.SECRET_KEY }}
        REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        REPOSITORY: ${{ env.REPOSITORY }}
        IMAGE_TAG: ${{ github.sha }}
        POSTGRES_DB: ${{ env.POSTGRES_DB }}
        POSTGRES_USER: ${{ env.POSTGRES_USER }}
        POSTGRES_PASSWORD: ${{ env.POSTGRES_PASSWORD }}
        POSTGRES_HOST: ${{ env.POSTGRES_HOST }}
        POSTGRES_PORT: ${{ env.POSTGRES_PORT }}
      run: |
        docker build -t $REGISTRY/$REPOSITORY:$IMAGE_TAG .
        docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG
